Execute (Setup):
  let g:plugin = maktaba#plugin#Get('vim-unfocus')
  call g:plugin.flags.plugin.Set({'autocmds': 1})

  command! SetUp tabnew | set number | set relativenumber
  command! TearDown tabclose

  call g:plugin.Flag('to_set', {'on_unfocus': {'&number': 0, '&relativenumber': 0},
                             \  'on_focus': {'&number': 1, '&relativenumber': 1}})

Execute (unfocuses when we switch to a new window, but reenables when we switch back):
  SetUp

  let g:old_win = win_getid()
  vnew
  let g:new_win = win_getid()

  AssertEqual 1, &number
  AssertEqual 1, &relativenumber

  AssertEqual 0, unfocus#WinVarFromID(g:old_win, '&number')
  AssertEqual 0, unfocus#WinVarFromID(g:old_win, '&relativenumber')

Then:
  TearDown


Execute (doesn't unfocus when we open a new buffer in the same window):
  SetUp
  let g:cur_win = win_getid()
  let g:cur_buf = bufnr('%')

  edit foobar

  AssertEqual 1, unfocus#WinVarFromID(g:cur_win, '&number')
  AssertEqual 1, unfocus#WinVarFromID(g:cur_win, '&relativenumber')

  execute g:cur_buf . 'buffer'

  AssertEqual 1, unfocus#WinVarFromID(g:cur_win, '&number')
  AssertEqual 1, unfocus#WinVarFromID(g:cur_win, '&relativenumber')

Then:
  TearDown


Execute (unfocuses and refocuses when we open the same buffer in a new tab):
  SetUp
  edit a_buffer
  let g:cur_win = win_getid()

  AssertEqual 1, unfocus#WinVarFromID(g:cur_win, '&number')
  AssertEqual 1, unfocus#WinVarFromID(g:cur_win, '&relativenumber')

  execute 'tabnew '.bufname('%')

  AssertEqual 1, &number
  AssertEqual 1, &relativenumber

  AssertEqual 0, unfocus#WinVarFromID(g:cur_win, '&number')
  AssertEqual 0, unfocus#WinVarFromID(g:cur_win, '&relativenumber')
