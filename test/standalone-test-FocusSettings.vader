Execute (Setup):
  let g:plugin = maktaba#plugin#Get('vim-unfocus')
  call g:plugin.Flag('plugin[autocmds]', 0)

  Assert !exists('#unfocus_update'), "VIM-UNFOCUS WINDOW UPDATE AUTOCMDS ARE ENABLED; TESTS WON'T WORK!"
  command! SetUp set number | set relativenumber
  SetUp

  let g:settings = ['&number', '&relativenumber']
  let g:on_focus = {'&number': 1, '&relativenumber': 1}
  let g:on_unfocus = {'&number': 0, '&relativenumber': 0}


Execute (constructing from a window-to-unfocus works):
  AssertEqual 1, &number, 'setup failed'
  AssertEqual 1, &relativenumber, 'setup failed'

  let wininfo = unfocus#WindowInfo#New(win_getid())
  let fs = unfocus#FocusSettings#FromToUnfocus(wininfo, g:on_unfocus)
  AssertEqual g:on_unfocus, wininfo.GetVals(g:settings)

  call fs.Focus(wininfo, g:settings)
  AssertEqual g:on_focus, wininfo.GetVals(g:settings)

  call fs.Unfocus(wininfo, g:settings)
  AssertEqual g:on_unfocus, wininfo.GetVals(g:settings)

Then (Cleanup):
  SetUp

Execute (constructing from an already-unfocused window works):
  set number
  set norelativenumber
  AssertEqual 1, &number, 'setup failed'
  AssertEqual 0, &relativenumber, 'setup failed'

  let wininfo = unfocus#WindowInfo#New(win_getid())
  let fs = unfocus#FocusSettings#FromUnfocused(wininfo, g:on_focus)
  AssertEqual {'&number': 1, '&relativenumber': 0}, wininfo.GetVals(g:settings)

  call fs.Focus(wininfo, g:settings)
  AssertEqual g:on_focus, wininfo.GetVals(g:settings)

  call fs.Unfocus(wininfo, g:settings)
  AssertEqual {'&number': 1, '&relativenumber': 0}, wininfo.GetVals(g:settings)

Then (Cleanup):
  SetUp

Execute (constructing from an already-focused window works):
  AssertEqual 1, &number, 'setup failed'
  AssertEqual 1, &relativenumber, 'setup failed'

  let wininfo = unfocus#WindowInfo#New(win_getid())
  let fs = unfocus#FocusSettings#FromFocused(wininfo, g:on_unfocus)
  AssertEqual g:on_focus, wininfo.GetVals(g:settings)

  call fs.Unfocus(wininfo, g:settings)
  AssertEqual g:on_unfocus, wininfo.GetVals(g:settings)

  call fs.Focus(wininfo, g:settings)
  AssertEqual g:on_focus, wininfo.GetVals(g:settings)

Execute (constructing from a window-to-unfocus in another tab works):
  let wininfo = unfocus#WindowInfo#New(win_getid())
  SetUp

  tabnew
  AssertEqual g:on_focus, wininfo.GetVals(g:settings)

  let fs = unfocus#FocusSettings#FromToUnfocus(wininfo, g:on_unfocus)
  AssertEqual g:on_unfocus, wininfo.GetVals(g:settings)

  call fs.Focus(wininfo, g:settings)
  AssertEqual g:on_focus, wininfo.GetVals(g:settings)

Then (Cleanup):
  tabclose

Execute ("asymmetric" on_focus and on_unfocus settings work correctly):
  set number
  set relativenumber

  let wininfo = unfocus#WindowInfo#New(win_getid())
  let fs = unfocus#FocusSettings#FromFocused(wininfo, {'&relativenumber': 0})

  AssertEqual 1, &number
  AssertEqual 1, &relativenumber

  call fs.Unfocus(wininfo, g:settings)  " stash 1, 1
  AssertEqual {'&number': 1, '&relativenumber': 0}, wininfo.GetVals(g:settings)

  set nonumber
  AssertEqual {'&number': 0, '&relativenumber': 0}, wininfo.GetVals(g:settings)

  call fs.Focus(wininfo, g:settings)  " stash 0, 0
  AssertEqual {'&number': 1, '&relativenumber': 1}, wininfo.GetVals(g:settings)

  call fs.Unfocus(wininfo, g:settings)
  AssertEqual {'&number': 0, '&relativenumber': 0}, wininfo.GetVals(g:settings)

  call fs.Focus(wininfo, g:settings)
  AssertEqual {'&number': 1, '&relativenumber': 1}, wininfo.GetVals(g:settings)
